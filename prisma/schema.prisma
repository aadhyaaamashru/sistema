generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Absence {
  id                  Int      @id @default(autoincrement())
  lessonDate          DateTime
  lessonPlan          String?
  reasonOfAbsence     String
  absentTeacherId     Int
  substituteTeacherId Int?
  locationId          Int
  subjectId           Int
  absentTeacher       User     @relation("absentTeacher", fields: [absentTeacherId], references: [id])
  substituteTeacher   User?    @relation("substituteTeacher", fields: [substituteTeacherId], references: [id])
  location            Location @relation(fields: [locationId], references: [id])
  subject             Subject  @relation(fields: [subjectId], references: [id])
}

model User {
  id            Int       @id @default(autoincrement())
  authId        String    @unique
  email         String    @unique
  firstName     String
  lastName      String
  role          Role      @default(TEACHER)
  status        Status    @default(INVITED)
  numOfAbsences Int       @default(10)
  absences      Absence[] @relation("absentTeacher") // corrected relation for absences
  substitutes   Absence[] @relation("substituteTeacher") // relation for substitute teacher absences
  accounts      Account[]
}

model Account {
  id                 String    @id @default(cuid())
  userId             Int
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, providerAccountId])
}

model Location {
  id           Int       @id @default(autoincrement())
  name         String
  abbreviation String
  Absence      Absence[]
}

model MailingList {
  id     Int      @id @default(autoincrement())
  name   String
  emails String[]
}

model Subject {
  id           Int       @id @default(autoincrement())
  name         String
  abbreviation String
  Absence      Absence[]
}

enum Role {
  TEACHER
  ADMIN
}

enum Status {
  ACTIVE
  INVITED
  DEACTIVATED
}
